<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Huiba Li]]></title>
  <link href="http://lihuiba.github.io/atom.xml" rel="self"/>
  <link href="http://lihuiba.github.io/"/>
  <updated>2014-03-26T23:10:39+08:00</updated>
  <id>http://lihuiba.github.io/</id>
  <author>
    <name><![CDATA[Huiba Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[共享端口的IPMI设置]]></title>
    <link href="http://lihuiba.github.io/blog/2014/03/26/gong-xiang-duan-kou-de-ipmishe-zhi/"/>
    <updated>2014-03-26T22:51:49+08:00</updated>
    <id>http://lihuiba.github.io/blog/2014/03/26/gong-xiang-duan-kou-de-ipmishe-zhi</id>
    <content type="html"><![CDATA[<p>IPMI可以让系统管理员远程控制服务器硬件，无论操作系统处于什么状态，甚至无论是否开机，
只要电源已接通，就可以接受控制，因而IPMI对于实验用途的服务器意义巨大。我们的集群之
前一直使用专用的IPMI网络，这需要额外的交换机、网线投入，也需要额外的安装、维护投入，
而且会使线路杂乱而不利于管理。</p>

<p>这次我们新配置的集群打算使用共享端口及其线路的方式来使用IPMI，其基本原理是通过VLAN
复用eth0端口/线路，业务网和IPMI网分别运行在不同的VLAN当中。当eth0端口收到报文，
会先判断其VLAN ID，若与IPMI的ID一致，则将报文转发给IPMI子系统，否则交给正常的报
文处理逻辑。</p>

<p>当我兴致勃勃地进入BIOS，想给IPMI配置网络的时候，却发现只能修改IP地址、子网掩码和
网关，而网络则只能是“dedicated”，该选项是灰色，不能改。如下图所示：</p>

<p><img src="http://lihuiba.github.io/images/ipmi-dedicated.jpg" width="512"></p>

<p>我怀疑“IPMI LAN Selection”选项不可改是因为主板集成的是比较新的万兆网卡，IPMI
相关功能尚不完善，于是暂时放弃。不过当晚在网上搜索资料时，无意中发现该网卡是支持
“IPMI passthrough”功能的，从字面看貌似相关功能应该是完备的，于是我决定再次尝试
一下。</p>

<p>这次我先在BIOS里设置好IPMI的静态IP地址、子网掩码和网关，然后通过IPMI专用端口连
接网络，再用浏览器打开IPMI的web配置界面，在Configuration / Networking页面里
找到了共享端口相关的设置，如下图所示。我将VLAN设置为“enable”，VLAN ID设置为“100”，
Lan Interface设置为“Share”，然后通过eth0端口和VLAN 100成功访问到了IPMI功能。</p>

<p><img src="http://lihuiba.github.io/images/ipmi-shared.jpg" width="512"></p>

<p>配置好共享端口之后，再次进入BIOS就可以看到IPMI的网络端口已变成“Share LAN”，而专
用网络连接的状态变成“No Connect”。</p>

<p><img src="http://lihuiba.github.io/images/ipmi-vlan.png" width="512"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A source committing issue in oscailte theme]]></title>
    <link href="http://lihuiba.github.io/blog/2014/02/12/a-source-committing-issue-in-octopress-theme/"/>
    <updated>2014-02-12T11:30:54+08:00</updated>
    <id>http://lihuiba.github.io/blog/2014/02/12/a-source-committing-issue-in-octopress-theme</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using the oscailte theme for Octopress. When I try
to commit the source files to the repository, I come
across an error. I type <code>git add .</code>, and I get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fatal: Not a git repository: sass/inuitcss/../../.git/modules/sass/inuitcss</span></code></pre></td></tr></table></div></figure>


<p>After googling the web, I find the fix: change the <code>gitdir</code> in <code>sass/inuitcss/.git</code> to</p>

<figure class='code'><figcaption><span>fixed gitdir</span><a href='http://github.com/coogie/oscailte/issues/23'>found at</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gitdir: ../../.themes/oscailte/.git/modules/sass/inuitcss</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages]]></title>
    <link href="http://lihuiba.github.io/blog/2014/02/11/github-pages/"/>
    <updated>2014-02-11T10:19:39+08:00</updated>
    <id>http://lihuiba.github.io/blog/2014/02/11/github-pages</id>
    <content type="html"><![CDATA[<p>Github provides web site hosting service for projects as well as users or
organizations. The hosting service supports only static pages, so we have
to generate the .html files from markdown files before uploading them. The
page contents are also controlled by git, so uploading is done by <code>git
commit</code> and <code>git push</code>.</p>

<p>Project site can be automatically generated by an <strong>Automatic Page Generator</strong>
in <strong>repository setting</strong>. By convention, project site is located on the
project&rsquo;s <strong>gh-pages</strong> branch. We can switch to that branch by <code>git checkout
gh-pages</code>. The site can be also manually created, by creating the gh-pages
branch. The site URL will be <a href="http://username.github.io/projectname/.">http://username.github.io/projectname/.</a></p>

<p>User or organization site is created by creating a repository named
<strong><em>username</em>.github.io</strong>, and the site URL will be
<a href="http://username.github.io/.">http://username.github.io/.</a></p>

<p>Github web site hosting service supports custom domain names. The detailed
instruction can be found at <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages.">https://help.github.com/articles/setting-up-a-custom-domain-with-pages.</a></p>

<p>We can write blog using simple Markdown syntax, and use <strong>Jekyll</strong> to generate
.html files from markdown files. See <a href="http://jekyllrb.com/docs/quickstart/">http://jekyllrb.com/docs/quickstart/</a> for
detail. We can further use <strong>octopress</strong> to help us handling HTML templates,
CSS, Javascripts and setting up our configuration. See <a href="http://octopress.org/">http://octopress.org/</a>
for detail.</p>

<p>Other things about github pages, such as custom 404 page, can be found at
<a href="http://octopress.org/.">http://octopress.org/.</a></p>
]]></content>
  </entry>
  
</feed>
